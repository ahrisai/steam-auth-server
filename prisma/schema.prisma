generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  nickname      String
  email         String
  password      String
  user_avatar   String?
  description   String?
  birthday      String
  gender        String
  csgo_data     Cs2_data?
  teams         Team?
  valorant_data Valorant_Data?
}

model Valorant_Data {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cs2_data {
  id      Int                @id @default(autoincrement())
  userId  Int                @unique
  steamId String
  matches Int
  winrate Float
  kd      Float
  wins    Int
  hs      Float
  lvlImg  String
  elo     Int
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  maps    Cs2_dataCs2Maps[]
  roles   Cs2_dataCs2Roles[]
}

model Cs2Roles {
  id    Int                @id @default(autoincrement())
  name  String             @unique
  roles Cs2_dataCs2Roles[]
}

model Cs2Maps {
  id   Int               @id @default(autoincrement())
  name String            @unique
  maps Cs2_dataCs2Maps[]
}

model Cs2_dataCs2Roles {
  cs2_dataId Int
  cs2RoleId  Int
  cs2Role    Cs2Roles @relation(fields: [cs2RoleId], references: [id])
  csgo_data  Cs2_data @relation(fields: [cs2_dataId], references: [id])

  @@id([cs2_dataId, cs2RoleId])
}

model Cs2_dataCs2Maps {
  cs2_dataId Int
  cs2MapId   Int
  cs2Map     Cs2Maps  @relation(fields: [cs2MapId], references: [id])
  csgo_data  Cs2_data @relation(fields: [cs2_dataId], references: [id])

  @@id([cs2_dataId, cs2MapId])
}
